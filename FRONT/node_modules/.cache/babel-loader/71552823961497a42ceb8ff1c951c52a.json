{"ast":null,"code":"import \"core-js/modules/es.array.includes.js\";\nexport default {\n  props: ['modifPost'],\n\n  data() {\n    return {\n      isNew: false,\n      isModify: false,\n      toModify: 0,\n      posts: [],\n      description: '',\n      image: '',\n      file: ''\n    };\n  },\n\n  methods: {\n    onToggleUpdate: function (id) {\n      this.toModify = id;\n      this.isModify = !this.isModify;\n    },\n    NewPost: function () {\n      const userId = JSON.parse(localStorage.getItem(\"userId\"));\n      const token = JSON.parse(localStorage.getItem(\"token\"));\n      let formData = new FormData();\n      formData.append('userId', userId);\n      formData.append('post', this.description);\n      formData.append('image', this.file);\n      formData.append('prenom', 'Alex');\n      formData.append('nom', 'alex');\n      fetch('http://localhost:3000/api/posts', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}` // 'Content-Type': 'multipart/form-data',\n\n        },\n        body: formData\n      }).then(response => {\n        response.json();\n        this.$router.go();\n      }).catch(error => console.log(error));\n    },\n    DelPost: function (_id) {\n      fetch('http://localhost:3000/api/posts').then(res => res.json()).then(data => {\n        this.posts = data;\n      }).catch(err => console.log(err.message));\n      const userId = JSON.parse(localStorage.getItem(\"userId\"));\n      const token = JSON.parse(localStorage.getItem(\"token\"));\n      fetch('http://localhost:3000/api/posts/' + `${_id}`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + `${token}`\n        },\n        body: JSON.stringify({\n          userId: userId\n        })\n      }).then(response => {\n        response.json();\n        console.log(response); // this.$router.go()\n      }).catch(error => console.log(error));\n    },\n    Like: function (post) {\n      const userId = JSON.parse(localStorage.getItem(\"userId\"));\n      const token = JSON.parse(localStorage.getItem(\"token\"));\n      const postId = post._id;\n      const postusersLiked = JSON.stringify(post.usersLiked);\n      fetch('http://localhost:3000/api/posts/' + `${postId}` + '/like', {\n        method: 'POST',\n        headers: {\n          'Authorization': 'Bearer ' + `${token}`,\n          'Accept': 'application/json; charset=utf-8',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId: userId,\n          like: postusersLiked.includes(userId) ? -1 : 1\n        })\n      }).then(response => response.json()).then(data => {\n        this.onRefresh();\n        console.log(data);\n      }).catch(error => console.log(error));\n    },\n    onRefresh: function () {\n      fetch('http://localhost:3000/api/posts').then(res => res.json()).then(data => this.posts = data).catch(err => console.log(err.message));\n    },\n    onFileChange: function (event) {\n      this.file = event.target.files[0];\n    }\n  },\n\n  mounted() {\n    this.onRefresh();\n  }\n\n};","map":{"version":3,"mappings":"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","names":["props","data","isNew","isModify","toModify","posts","description","image","file","methods","onToggleUpdate","id","NewPost","userId","JSON","parse","localStorage","getItem","token","formData","FormData","append","fetch","method","headers","body","then","response","json","$router","go","catch","error","console","log","DelPost","_id","res","err","message","stringify","Like","post","postId","postusersLiked","usersLiked","like","includes","onRefresh","onFileChange","event","target","files","mounted"],"sourceRoot":"","sources":["C:\\Users\\Alex_PC\\Desktop\\P7_Projet\\_FRONT\\groupomania\\src\\components\\PostComponent.vue"],"sourcesContent":["<template>\r\n    <div v-for=\"post in posts\" :key=\"post._id\" class=\"post\">\r\n      <div class=\"post_head\">\r\n        <p>{{ post.nom }} {{ post.prenom }} le {{ post.date }}</p>\r\n      </div>\r\n      <div class=\"post_body\">\r\n        <img :src=\"post.imageUrl\" alt=\"\">\r\n        <p>{{ post.description }}</p>\r\n      </div>\r\n      <div class=\"post_footer\">\r\n        <div class=\"post_footer_review\">\r\n          <a @click.prevent=\"Like(post)\"><i class=\"fa-solid fa-thumbs-up like\"></i><p> ({{ post.likes }})</p></a>\r\n        </div>\r\n        <div class=\"post_footer_modify\">\r\n          <a v-on:click=\"() => onToggleUpdate(post._id)\">Modifier</a>\r\n          <a @click.prevent=\"DelPost(_id)\">Supprimer</a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n    export default {\r\n  props: ['modifPost'],\r\n  data(){\r\n    return{\r\n     isNew: false,\r\n     isModify: false,\r\n     toModify: 0,\r\n     posts: [],\r\n     description: '',\r\n     image: '',\r\n     file: '',\r\n    }\r\n  },\r\n  methods: {\r\n    onToggleUpdate: function(id) {\r\n      this.toModify = id\r\n      this.isModify = !this.isModify\r\n    },\r\n    NewPost: function () {\r\n      const userId = JSON.parse(localStorage.getItem(\"userId\"));\r\n      const token = JSON.parse(localStorage.getItem(\"token\"));\r\n\r\n      let formData = new FormData();\r\n      formData.append('userId', userId);\r\n      formData.append('post',this.description);\r\n      formData.append('image',this.file);\r\n      formData.append('prenom', 'Alex');\r\n      formData.append('nom', 'alex');\r\n\r\n      fetch('http://localhost:3000/api/posts', {\r\n        method: 'POST',\r\n        headers: { \r\n            'Authorization': `Bearer ${token}`,\r\n            // 'Content-Type': 'multipart/form-data',\r\n        },\r\n        body: formData\r\n      })\r\n      .then(response => {\r\n        response.json()\r\n        this.$router.go()\r\n      })\r\n      .catch(error => console.log(error))\r\n    },\r\n    DelPost: function (_id) {\r\n      fetch('http://localhost:3000/api/posts')\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        this.posts = data\r\n      })\r\n      .catch(err => console.log(err.message))\r\n      const userId = JSON.parse(localStorage.getItem(\"userId\"));\r\n      const token = JSON.parse(localStorage.getItem(\"token\"));\r\n      fetch('http://localhost:3000/api/posts/'+ `${_id}`, {\r\n        method: 'DELETE',\r\n        headers: { \r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + `${token}`\r\n        },\r\n        body: JSON.stringify(\r\n          {\r\n            userId: userId,\r\n          })\r\n      })\r\n      .then(response => {\r\n        response.json()\r\n        console.log(response)\r\n        // this.$router.go()\r\n      })\r\n      .catch(error => console.log(error))\r\n    },\r\n    Like: function(post) {\r\n\r\n      const userId = JSON.parse(localStorage.getItem(\"userId\"));\r\n      const token = JSON.parse(localStorage.getItem(\"token\"));\r\n      const postId = post._id;\r\n      const postusersLiked = JSON.stringify(post.usersLiked);\r\n\r\n        fetch('http://localhost:3000/api/posts/'+ `${postId}` + '/like', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Authorization': 'Bearer ' + `${token}`,\r\n            'Accept': 'application/json; charset=utf-8',\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(\r\n          {\r\n            userId: userId,\r\n            like : postusersLiked.includes(userId) ? -1 : 1,\r\n          })\r\n      })\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        this.onRefresh()\r\n        console.log(data)\r\n      })\r\n      .catch(error => console.log(error));\r\n\r\n\r\n    },\r\n\r\n    onRefresh: function() {\r\n      fetch('http://localhost:3000/api/posts')\r\n      .then(res => res.json())\r\n      .then(data => this.posts = data)\r\n      .catch(err => console.log(err.message))\r\n    },\r\n\r\n    onFileChange: function( event ){\r\n      this.file = event.target.files[0];\r\n    },\r\n    \r\n  },\r\n\r\n  mounted(){\r\n    this.onRefresh()\r\n  },\r\n}\r\n</script>\r\n\r\n\r\n<style scoped>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}