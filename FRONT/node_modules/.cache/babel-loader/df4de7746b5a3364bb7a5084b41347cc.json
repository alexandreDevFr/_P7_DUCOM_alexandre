{"ast":null,"code":"import { createStore } from 'vuex';\nexport default createStore({\n  state: {},\n  getters: {},\n  mutations: {},\n  actions: {\n    REGISTER: ({\n      commit\n    }, {\n      prenom,\n      nom,\n      password,\n      email\n    }) => {\n      return new Promise((resolve, reject) => {\n        fetch(`http://localhost:3000/api/auth/signup`, {\n          method: \"POST\",\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            prenom,\n            nom,\n            password,\n            email\n          })\n        }).then(({\n          data,\n          status\n        }) => {\n          if (status === 201) {\n            resolve(true);\n            console.log('Utilisateur créé !');\n            return resolve;\n          } else {\n            if (status === 401) {\n              resolve(false);\n              console.error('Mot de passe trop court');\n              return status;\n            } else {\n              if (status === 400) {\n                resolve(false);\n                console.error('Adresse email déjà utilisé');\n              }\n            }\n          }\n        });\n      });\n    },\n    LOGIN: ({\n      commit\n    }, {\n      email,\n      password\n    }) => {\n      return new Promise((resolve, reject) => {\n        const requestOptions = {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            email,\n            password\n          })\n        };\n        fetch('http://localhost:3000/api/auth/login', requestOptions).then(async response => {\n          const data = await response.json(); // check for error response\n\n          if (!response.ok) {\n            // get error message from body or default to response status\n            const error = data && data.message || response.status;\n            return Promise.reject(error);\n          }\n        }).catch(error => {\n          console.error('There was an error!', error);\n        });\n      });\n    } //   LOGIN: ({ commit }, {email, password}) => {\n    //     return new Promise((resolve, reject) => {\n    //       fetch(`http://localhost:3000/api/auth/login`, {\n    //           method: \"POST\",\n    //           headers: {\n    //             'Content-Type': 'application/json',\n    //           },\n    //           body: JSON.stringify({email, password})\n    //         })\n    //         .then(({data, status}) => {\n    //           if (status === 200) {\n    //             resolve(true)\n    //               console.log('Connexion au site..')\n    //               console.log(resolve)\n    //               console.log(JSON.stringify(resolve)) \n    //           }else{\n    //             if (status === 401){\n    //               resolve(false);\n    //               console.error('Nom d\\'utilisateur incorrect')\n    //           }\n    //         }\n    //     })\n    //   });\n    // },\n\n  },\n  modules: {}\n});","map":{"version":3,"names":["createStore","state","getters","mutations","actions","REGISTER","commit","prenom","nom","password","email","Promise","resolve","reject","fetch","method","headers","body","JSON","stringify","then","data","status","console","log","error","LOGIN","requestOptions","response","json","ok","message","catch","modules"],"sources":["C:/Users/Alex_PC/Desktop/P7_Projet/_FRONT/groupomania/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\n\nexport default createStore({\n  state: {\n  },\n  getters: {\n  },\n  mutations: {\n  },\n  actions: {\n    REGISTER: ({ commit }, {prenom, nom, password, email}) => {\n        return new Promise((resolve, reject) => {\n          fetch(`http://localhost:3000/api/auth/signup`, {\n            method: \"POST\",\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({prenom, nom, password, email})\n          })\n          .then(({data, status}) => {\n              if (status === 201) {\n                resolve(true);\n                console.log('Utilisateur créé !')\n                return resolve\n              }else{\n                if (status === 401){\n                  resolve(false);\n                  console.error('Mot de passe trop court')\n                  return status\n                }else{\n                  if (status === 400){\n                    resolve(false);\n                    console.error('Adresse email déjà utilisé')\n                  }\n                }\n              }\n          })\n\n        });\n    },\n\n    LOGIN: ({ commit }, {email, password}) => {\n      return new Promise((resolve, reject) => {\n      const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({email, password })\n      };\n      fetch('http://localhost:3000/api/auth/login', requestOptions)\n      .then(async response => {\n        const data = await response.json();\n  \n        // check for error response\n        if (!response.ok) {\n          // get error message from body or default to response status\n          const error = (data && data.message) || response.status;\n          return Promise.reject(error);\n        }\n  \n      })\n      .catch(error => {\n        console.error('There was an error!', error);\n      });\n\n    });\n    },\n  //   LOGIN: ({ commit }, {email, password}) => {\n  //     return new Promise((resolve, reject) => {\n  //       fetch(`http://localhost:3000/api/auth/login`, {\n  //           method: \"POST\",\n  //           headers: {\n  //             'Content-Type': 'application/json',\n  //           },\n  //           body: JSON.stringify({email, password})\n  //         })\n  //         .then(({data, status}) => {\n  //           if (status === 200) {\n  //             resolve(true)\n  //               console.log('Connexion au site..')\n  //               console.log(resolve)\n  //               console.log(JSON.stringify(resolve)) \n  //           }else{\n  //             if (status === 401){\n  //               resolve(false);\n  //               console.error('Nom d\\'utilisateur incorrect')\n  //           }\n  //         }\n  //     })\n  //   });\n  // },\n\n},\n  modules: {\n  }\n})\n\n\n\n"],"mappings":"AAAA,SAASA,WAAT,QAA4B,MAA5B;AAEA,eAAeA,WAAW,CAAC;EACzBC,KAAK,EAAE,EADkB;EAGzBC,OAAO,EAAE,EAHgB;EAKzBC,SAAS,EAAE,EALc;EAOzBC,OAAO,EAAE;IACPC,QAAQ,EAAE,CAAC;MAAEC;IAAF,CAAD,EAAa;MAACC,MAAD;MAASC,GAAT;MAAcC,QAAd;MAAwBC;IAAxB,CAAb,KAAgD;MACtD,OAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;QACtCC,KAAK,CAAE,uCAAF,EAA0C;UAC7CC,MAAM,EAAE,MADqC;UAE7CC,OAAO,EAAE;YACP,gBAAgB;UADT,CAFoC;UAK7CC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;YAACZ,MAAD;YAASC,GAAT;YAAcC,QAAd;YAAwBC;UAAxB,CAAf;QALuC,CAA1C,CAAL,CAOCU,IAPD,CAOM,CAAC;UAACC,IAAD;UAAOC;QAAP,CAAD,KAAoB;UACtB,IAAIA,MAAM,KAAK,GAAf,EAAoB;YAClBV,OAAO,CAAC,IAAD,CAAP;YACAW,OAAO,CAACC,GAAR,CAAY,oBAAZ;YACA,OAAOZ,OAAP;UACD,CAJD,MAIK;YACH,IAAIU,MAAM,KAAK,GAAf,EAAmB;cACjBV,OAAO,CAAC,KAAD,CAAP;cACAW,OAAO,CAACE,KAAR,CAAc,yBAAd;cACA,OAAOH,MAAP;YACD,CAJD,MAIK;cACH,IAAIA,MAAM,KAAK,GAAf,EAAmB;gBACjBV,OAAO,CAAC,KAAD,CAAP;gBACAW,OAAO,CAACE,KAAR,CAAc,4BAAd;cACD;YACF;UACF;QACJ,CAxBD;MA0BD,CA3BM,CAAP;IA4BH,CA9BM;IAgCPC,KAAK,EAAE,CAAC;MAAEpB;IAAF,CAAD,EAAa;MAACI,KAAD;MAAQD;IAAR,CAAb,KAAmC;MACxC,OAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;QACxC,MAAMc,cAAc,GAAG;UACrBZ,MAAM,EAAE,MADa;UAErBC,OAAO,EAAE;YAAE,gBAAgB;UAAlB,CAFY;UAGrBC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;YAACT,KAAD;YAAQD;UAAR,CAAf;QAHe,CAAvB;QAKAK,KAAK,CAAC,sCAAD,EAAyCa,cAAzC,CAAL,CACCP,IADD,CACM,MAAMQ,QAAN,IAAkB;UACtB,MAAMP,IAAI,GAAG,MAAMO,QAAQ,CAACC,IAAT,EAAnB,CADsB,CAGtB;;UACA,IAAI,CAACD,QAAQ,CAACE,EAAd,EAAkB;YAChB;YACA,MAAML,KAAK,GAAIJ,IAAI,IAAIA,IAAI,CAACU,OAAd,IAA0BH,QAAQ,CAACN,MAAjD;YACA,OAAOX,OAAO,CAACE,MAAR,CAAeY,KAAf,CAAP;UACD;QAEF,CAXD,EAYCO,KAZD,CAYOP,KAAK,IAAI;UACdF,OAAO,CAACE,KAAR,CAAc,qBAAd,EAAqCA,KAArC;QACD,CAdD;MAgBD,CAtBQ,CAAP;IAuBD,CAxDM,CAyDT;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;EAhFS,CAPgB;EA0FzBQ,OAAO,EAAE;AA1FgB,CAAD,CAA1B"},"metadata":{},"sourceType":"module"}